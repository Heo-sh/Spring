프레임워크: 무언가를 만들기 위한 기본적인 틀

스프링 프레임워크
EJB(Enterprize Java Beans): 유료, 너무 어려움(유지, 보수 힘듬)
위의 것 이후로 만들어진 것이 스프링

Spring Framework: 오픈소스(무료), EJB의 90% 이상의 기능 구현

전자정부프레임워크 -> 스프링

STS -> 스프링 개발을 위한 이클립스

스프링 -> 지원이 끝났다.

if, 이클립스에서 플러그인 다운받으려면 2021-03버전까지만 가능

웹 기준
java -> Spring, Spring boot
Python -> Flask, Django
C -> .Net

프로젝트의 기본 경로

경로								설명

src/main/java							서버단 JAVA파일
src/test/java							단위테스트를 위한 JAVA파일
src/main/resources							관련 설정파일
src/test/resources							src/main/test 관련 설정 파일
src/main/webapp/WEB-INF/views					jsp, html파일경로
pom.xml								라이브러리 의존성 관리
src/main/webapp/WEB-INF/spring/appServlet/servlet-context.xml		웹과 관련된 스프링 설정파일
src/main/webapp/WEB-INF/spring/root-context.xml			스프링 객체 관련 설정 파일

형상관리(버전 관리)
- git, svn, svc

빌드툴
- ant, maven, gradle

getter, setter, 생성자까지 대신 만들어주는 라이브러리
- lombok(롬복)

----------------------------------------------------------------------

스프링의 특징
- 기본적으로 singleton: 메모리에 1번만 점유
- 자바객체를 직접 관리
- IOC(Inversion Of Control): 제어 역전
	- 컨트롤의 제어권이 사용자가 아니라 스프링에 있어서
	  필요함에 따라 스프링에서 사용자의 코드를 호출해서 사용
	- 클래스 간에 결합도는 약하게 유지하는 것이 좋다.

-------------------------------------------------
주입(Injection)
- setter injection
- 생성자 주입(Constructor Injection) -> 많이 쓰는 편
- 의존성 주입(Dependency Injection)

--------------------------------------------------
객체 만드는 법
1. xml -> bean
2. java -> @Bean

--------------------------------------
추상클래스
- 일반적인 메서드


- 추상메서드

----------------------------------
selectList() -> List<VO>
selectOne() -> VO
insert, update, delete -> int

--------------------------------------------
의존 자동 주입
- 의존 대상을 설정 코드에서 직접 주입하지 않고
  스프링이 자동으로 의존하는 빈 객체를 주입해주는 기능

@Autowired
- 자동 주입 기능을 사용하면 스프링이 알아서 의존 객체를 찾아서 주입
- 자동 주입 기능을 사용하는 방법은 의존을 주입할 대상에
  @Autowired 어노테이션을 붙이기만 하면 됨

--------------------------------------------
프로젝트
- 기한: 2주(주말 포함) 6/16 ~ 19일까지
- 발표: 20~21?
- 대면 진행
- 팀 랜덤
- 4~5명으로 한 팀 구성
- 그 동안 배웠던 것 + @
- 마지막날 or 다음날 발표
--------------------------------------------
json = {"name":"홍길동","tel":{"cell":"010-2222-2222","home":"032-1111-1111"},"age":20}
- if, home에 접근을 하려면
- json.tel.home.value

----------------------------------------------
controller를 기능 별로 구현해주면 좋다.
ex) 회원과리 controller, 게시판 controller 등

--------------------------------------------------
단위테스트
- 하나의 모듈을 기준으로 독립적으로 진행되는 가장 단위의 테스트
- 하나의 기능이 올바르게 작동하는 지를 독립적을 테스트하는 방식
- 단위 테스트는 테스트하고자 하는 부분만 독립적을 테스트하기 때문에
  해당 단위를 유지보수 or 리팩토링 하더라도 빠르게 문제를 확인 가능

---------------------------
프로젝트 진행 시 일반적인 과정
1. 테이블 설계
2. 프론트(디자인)
3. 백엔드(기능 구현)
-----------------------------------------
2조: 허성혁 임효인 정태하 송나윤 이진솔










